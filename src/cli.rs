use clap::{crate_authors, crate_description, crate_name, crate_version, App, Arg};

pub fn build() -> App {
    App::new(crate_name!())
    .version(crate_version!())
    .author(crate_authors!())
    .about(crate_description!())
    .subcommand(
        App::new("get")
            .about("Get a secret from the vault")
            .arg(Arg::with_name("id")
                    .short("i")
                    .long("id")
                    .value_name("SECRET_ID")
                    .help("The name of the secret to get")
                    .required(true)
                    .index(1),
            )
    )
    .subcommand(
        App::new("store")
            .about("Store a secret into the vault")
            .arg(Arg::with_name("secret")
                    .short("s")
                    .long("secret")
                    .value_name("SECRET")
                    .help("The secret to put")
                    .required(true)
                    .index(1),
            )
            .arg(Arg::with_name("type")
                    .short("t")
                    .long("type")
                    .value_name("TYPE")
                    .help("The type of secret to store")
                    .required(false)
                    .index(2),
            )
            .arg(Arg::with_name("name")
                    .short("n")
                    .long("name")
                    .value_name("NAME")
                    .help("The name of the secret to store")
                    .required(false)
                    .index(3),
            )
            .arg(Arg::with_name("folder")
                    .short("f")
                    .long("folder")
                    .value_name("FOLDER")
                    .help("The folder to store the secret in")
                    .required(false)
                    .index(4),
            )
            .arg(Arg::with_name("metadata")
                    .short("m")
                    .long("metadata")
                    .value_name("METADATA")
                    .help("The metadata to store with the secret")
                    .required(false)
                    .index(5),
            )
    )
    .subcommand(
        App::new("update")
            .about("Update a secret in the vault")
            .arg(Arg::with_name("id")
                    .short("i")
                    .long("id")
                    .value_name("SECRET_ID")
                    .help("The name of the secret to update")
                    .required(true)
                    .index(1),
            )
            .arg(Arg::with_name("name")
                    .short("n")
                    .long("name")
                    .value_name("NAME")
                    .help("The name of the secret to update")
                    .required(false)
                    .index(2),
            )
            .arg(Arg::with_name("folder")
                    .short("f")
                    .long("folder")
                    .value_name("FOLDER")
                    .help("The folder to store the secret in")
                    .required(false)
                    .index(3),
            )
            .arg(Arg::with_name("metadata")
                    .short("m")
                    .long("metadata")
                    .value_name("METADATA")
                    .help("The metadata to store with the secret")
                    .required(false)
                    .index(4),
            )
            .arg(Arg::with_name("tags")
                    .short("t")
                    .long("tags")
                    .value_name("TAGS")
                    .help("The tags to store with the secret")
                    .required(false)
                    .index(5),
            )
    )
    .subcommand(
        App::new("list")
            .about("List secrets in the vault")
            .arg(Arg::with_name("folder")
                    .short("f")
                    .long("folder")
                    .value_name("FOLDER")
                    .help("The folder to list secrets from")
                    .required(false)
                    .index(1),
            )
            .arg(Arg::with_name("tags")
                    .short("t")
                    .long("tags")
                    .value_name("TAGS")
                    .help("The tags to filter secrets by")
                    .required(false)
                    .index(2),
            )
            .arg(Arg::with_name("name_contains")
                    .short("n")
                    .long("name_contains")
                    .value_name("NAME_CONTAINS")
                    .help("The name to filter secrets by")
                    .required(false)
                    .index(3),
            )
            .arg(Arg::with_name("created_at")
                    .short("c")
                    .long("created_at")
                    .value_name("CREATED_AT")
                    .help("The date to filter secrets by")
                    .required(false)
                    .index(4),
            )
            .arg(Arg::with_name("size")
                    .short("s")
                    .long("size")
                    .value_name("SIZE")
                    .help("The number of secrets to return")
                    .required(false)
                    .index(5),
            )
            .arg(Arg::with_name("order")
                    .short("o")
                    .long("order")
                    .value_name("ORDER")
                    .help("The order to return secrets in")
                    .required(false)
                    .index(6),
            )
            .arg(Arg::with_name("order_by")
                    .short("ob")
                    .long("order_by")
                    .value_name("ORDER_BY")
                    .help("The order to return secrets in")
                    .required(false)
                    .index(7),
            )
            .arg(Arg::with_name("last")
                    .short("l")
                    .long("last")
                    .value_name("LAST")
                    .help("The last secret to return")
                    .required(false)
                    .index(8),
            )
            .arg(Arg::with_name("include_secrets")
                    .short("i")
                    .long("include_secrets")
                    .value_name("INCLUDE_SECRETS")
                    .help("Whether to include secrets in the response")
                    .required(false)
                    .index(9),
            )
    )
    .subcommand(
        App::new("delete")
            .about("Delete a secret from the vault")
            .arg(Arg::with_name("id")
                    .short("i")
                    .long("id")
                    .value_name("SECRET_ID")
                    .help("The name of the secret to delete")
                    .required(true)
                    .index(1),
            )
    )
}